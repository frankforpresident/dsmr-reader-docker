#!/usr/bin/env sh

# Function to print debug messages for environment secrets
env_secret_debug() {
    if [ ! -z "$ENV_SECRETS_DEBUG" ]; then
        echo -e "\033[1m$@\033[0m"
    fi
}

# This function populates environment variables from variables containing file paths
populate_file_variables() {
    for env_var in $(env | grep '_FILE=' | cut -d '=' -f 1); do
        var_name="${env_var%_FILE}" # Remove the '_FILE' suffix
        file_path=$(eval echo "\$$env_var") # Get the file path from the environment variable
        if [ -s "$file_path" ]; then
            export "$var_name"=$(cat "$file_path") # Read the file contents into the environment variable
            env_secret_debug "Populated variable: $var_name"
        else
            env_secret_debug "File is empty or does not exist: $file_path"
        fi
    done
}

# This function expands variables from docker secrets
expand_docker_secrets() {
    for env_var in $(printenv | cut -f1 -d"="); do
        var_value=$(eval echo "\$$env_var") # Get the value of the environment variable
        if secret_name=$(expr match "$var_value" "DOCKER-SECRET->\([^}]\+\)$"); then
            secret="${ENV_SECRETS_DIR}/${secret_name}"
            if [ -f "$secret" ]; then
                val=$(cat "$secret")
                export "$env_var"="$val" # Expand the variable with the secret value
                env_secret_debug "Expanded variable: $env_var"
            else
                env_secret_debug "Secret file does not exist! $secret"
            fi
        fi
    done
}

# Populate environment variables from variables containing file paths
if [ -d "/run/secrets" ]; then
    populate_file_variables

    # Conditionally expand variables from docker secrets
    if [ ! -z "$ENV_SECRETS_DIR" ] then
        expand_docker_secrets
    fi
else 
    env_secret_debug "No secrets found in /run/secrets"    
fi


# Execute the command provided as arguments to the script
exec "$@"
